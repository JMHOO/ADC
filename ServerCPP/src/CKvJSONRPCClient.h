/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_CKVRPCCLIENT_H_
#define JSONRPC_CPP_STUB_CKVRPCCLIENT_H_

#include <jsonrpccpp/client.h>

class CKvRPCClient : public jsonrpc::Client
{
public:
    CKvRPCClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}
    
    Json::Value Put(const std::string& param1, const std::string& param2) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        p.append(param2);
        Json::Value result = this->CallMethod("Put",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value Get(const std::string& param1) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        Json::Value result = this->CallMethod("Get",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value Delete(const std::string& param1) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        Json::Value result = this->CallMethod("Delete",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value SrvPut(const std::string& param1, const std::string& param2, const std::string& param3, const std::string& param4) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        p.append(param2);
        p.append(param3);
        p.append(param4);
        Json::Value result = this->CallMethod("SrvPut",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value SrvDelete(const std::string& param1, const std::string& param2, const std::string& param3, const std::string& param4) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        p.append(param2);
        p.append(param3);
        p.append(param4);
        Json::Value result = this->CallMethod("SrvDelete",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value SrvGo(const std::string& param1, const std::string& param2) throw (jsonrpc::JsonRpcException)
    {
        Json::Value p;
        p.append(param1);
        p.append(param2);
        Json::Value result = this->CallMethod("SrvGo",p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
};

#endif //JSONRPC_CPP_STUB_CKVRPCCLIENT_H_
